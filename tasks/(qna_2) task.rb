(qna_2) task:

task-9

    Реализовать следующие истории (или переделать существующие), используя JSON:

- Аутентифицированный пользователь может голосовать за понравившийся вопрос/ответ
- Пользователь не может голосовать за свой вопрос/ответ
- Пользователь может проголосовать "за" или "против" конкретного вопроса/ответа только один раз (нельзя голосовать 2 раза подряд "за" или "против")
- Пользователь может отменить свое решение и после этого переголосовать.
 - У вопроса/ответа должен выводиться результирующий рейтинг (разница между голосами "за" и "против")

**При реализации голосования запрещено использовать сторонние гемы для этого функционала**

**Рекомендации:**
- Рекомендую посмотреть мастер-класс "Rails Concerns" (ссылка в дополнительных материалах к уроку) и реализовать возможность голосования через консерны.



    task-8

- Реализовать добавление файлов к вопросам и ответам
- Реализовать возможность добавления нескольких файлов при создании вопроса или ответа.
    Для реализации можно использовать gem cocoon (github.com).
- Для вопросов/ответов, созданных с прикрепленными файлами, должна быть возможность удаления каждого из прикрепленных файлов. Удалить файл может только автор вопроса/ответа, к которому прикреплен данный файл.

**Примечания:**

Rails 5 и gem remotipart:

remotipart официально поддерживает работу с rails 5 начиная с версии 1.3
В Rails 5 валидация на ассоциацию belongs_to включена по-умолчанию,

                                                      но для вложенных объектов и форм ассоциация устанавливается позже, уже после валидации.
                                                          Из-за этого возникает проблема невалидности объекта при создании.
    Решение: объявить ассоциацию `belongs_to :attachable` у `Attachment` как `optional: true`.


Добавление индексов:

В скринкасте создаются 2 отдельных индекса для полей `attachmentable_type` и `attachmentable_id`.
    Правильнее делать составной индекс в этом случае, т.к. поиск идет сразу по 2-м полям:


add_index :attachments, [:attachmentable_id, :attachmentable_type]


Добавьте миграцию с созданием такого индекса. Отдельные индексы, если вы их создали, можно удалить через `remove_index`.


- С точки зрения грамматики английского языка, правильнее назвать связь **attachable**, а не attachmentable.


task-7

Используя ajax, реализовать следующие истории и задачи:

- Только автор может отредактировать свой вопрос
- Только автор может отредактировать свой ответ
- Переделать удаление ответов на ajax
- Автор вопроса может выбрать лучший ответ для своего вопроса (лучший ответ может быть только 1)
- Автор вопроса может выбрать другой ответ как лучший, если у вопроса уже выбран лучший ответ.
- Если у вопроса выбран лучший ответ, то он отображается первым в списке ответов.

**Примечания:**

- **Для RSpec 3:** Весь код, который в скринкасте помещается и изменяется в `spec_helper.rb` должен размещаться и изменяться в файле `rails_helper.rb`. В спеках вместо `require 'spec_helper'` надо использовать `require 'rails_helper'`.
- На 14:20 возникла техническа проблема - пропадает изображение на 7 секунд - но пониманию это не мешает, т.к. идет объяснение без написания кода.
- Проверку на авторство по-прежнему реализуем вручную на уровне контроллеров. Это нужно тестировать как на уровне acceptance-тестов, так и на уровне тестов контроллера.

_answer
- if answer.persisted?
p = answer.body
- if current_user && current_user.author_of?(answer)
= link_to 'Edit', '', class: 'edit-answer-link', data: {answer_id: answer.id}
p
= form_for [@question, answer], remote: true, html: {id: "edit-answer-#{answer.id}"} do |f|
= f.label :body, 'Answer'
= f.text_area :body
= f.submit 'Save'
end
p= link_to 'Delete', question_answer_path(@question, answer), method: :delete






task-6

Реализовать добавление ответов к вопросам через ajax, покрыть все тестами. При этом, нужно добавлять только вновь созданный ответ к вопросу, без повторного рендеринга всего списка ответов.

**Примечания:**

- Внимание! Для выполнения этого задания, вам потребуется добавить в проект jQuery. Ранее он добавлялся в проект автоматически, но с версии rails 5.1 это не так. Чтобы добавить этот гем, выполните шаги, как указано здесь:
github.com
- **Для RSpec 3:** Весь код, который в скринкасте помещается и изменяется в spec_helper.rb должен размещаться и изменяться в файле rails_helper.rb. В спеках вместо `require 'spec_helper'` надо использовать `require 'rails_helper'`.
- На 38:11 в скринкасте показан код
render :answers
вместо него должен быть
render 'answers'
(т.е. answers в кавычках; исправлено "за кадром").

task-4

**Примечания:** 

 - В RSpec 3+ вместо внесения изменений в `spec_helper.rb`, надо вносить изменения в `rails_helper.rb`
 - В Rails 5+ нужно добавить гем rails-controller-testing,  чтобы работали выражения assigns и render_template в тестах.


Реализовать следующие истории:
  - "Пользователь может создавать вопрос". Пока, аутентификацию не добавляем, то есть любой пользователь может создавать вопрос
  - "Пользователь может создавать ответ на вопрос".
 - При реализации, сначала писать тесты на экшены контроллереров и модели (если нужны). Естественно, в контроллерах пишем тесты только на те экшены, которые необходимы для реализации функционала. Если, например, пока нет удаления, то и писать тест и сам экшен не нужно.

**Важно!** Запрещается использовать scaffold при реализации функционала. Контроллеры, виды, модели - все нужно писать руками либо использовать генераторы, но не scaffold.

Внимание! В rails 5+ изменился синтаксис запросов в тестах контроллеров. Все параметры нужно указывать в хеше params, например:
 
get :show, params: { id: @question }
 

**Рекомендации и требования:** 
   
  - Под пользователем понимается любой пользователь, который будет взаимодействовать с приложением. Это значит, что в данном уроке создавать модель User и добавлять какую-либо аутентификацию НЕ нужно! Это будет сделано в следующем уроке.
  - Ресурс "ответы" должен быть вложенным в ресурс "вопросы", чтобы в контроллере можно было определить родительский вопрос и создать ответ для него.
  - Виды пока можно не реализовывать полностью, а сделать только "заглушки". Важнее контроллеры и тесты для них.

Выложить ссылку на Pull Request в качестве ответа на задание

task-3

1. Создать проект на github'е
2. Добавить в ваш отчет на форуме ссылку на проект в github и трекер.
3. Создать модели Вопроса и Ответа и тесты для них (сначала тесты). В первую очередь тестируем валидацию, связи с другими таблицами и т.п.
4. Запушить код на github в отдельную ветку и создать Pull Request из своей ветки в master
5. Отправить задание на проверку наставнику разместив ссылку на Pull Request в качестве ответа на задание.

Примечание:

В последней версии shoulda-matchers изменился способ подключения: github.com
Обратите внимание на блок config.integrate. Вам нужны не все строки, а только 2 из них:


with.test_framework :rspec
with.library :rails
